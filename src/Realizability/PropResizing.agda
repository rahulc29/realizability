open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Structure
open import Cubical.Data.Sigma

module Realizability.PropResizing where

-- Formulation of propositional resizing inspired by the corresponding formulation
-- in TypeTopology
-- https://www.cs.bham.ac.uk/~mhe/TypeTopology/UF.Size.html

copyOf : ‚àÄ {‚Ñì} ‚Üí Type ‚Ñì ‚Üí (‚Ñì' : Level) ‚Üí Type _
copyOf {‚Ñì} X ‚Ñì' = Œ£[ copy ‚àà Type ‚Ñì' ] X ‚âÉ copy

copy = fst
copyEquiv = snd

-- We need the principle that TypeTopology calls Œ© resizing
-- that the universe of props in a universe ùì§ has a copy in ùì§
-- This we call hPropResizing
hPropResizing : ‚àÄ ‚Ñì ‚Üí Type _
hPropResizing ‚Ñì = copyOf (hProp ‚Ñì) ‚Ñì
