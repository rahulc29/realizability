open import Realizability.ApplicativeStructure renaming (Term to ApplStrTerm)
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Equiv
open import Cubical.Data.Empty
open import Cubical.Data.Sigma
open import Cubical.Data.FinData
open import Cubical.Data.Vec
open import Cubical.HITs.PropositionalTruncation
open import Cubical.HITs.PropositionalTruncation.Monad
open import Cubical.HITs.SetQuotients as SQ
open import Cubical.Categories.Category
open import Cubical.Categories.Limits.Pullback
open import Realizability.PropResizing
open import Realizability.CombinatoryAlgebra

module Realizability.Topos.PowerObject
  {‚Ñì}
  {A : Type ‚Ñì}
  (ca : CombinatoryAlgebra A)
  (isNonTrivial : CombinatoryAlgebra.s ca ‚â° CombinatoryAlgebra.k ca ‚Üí ‚ä•)
  (resizing : hPropResizing ‚Ñì)
  where
  
open import Realizability.Tripos.Prealgebra.Predicate {‚Ñì' = ‚Ñì} {‚Ñì'' = ‚Ñì} ca
open import Realizability.Tripos.Prealgebra.Meets.Identity {‚Ñì' = ‚Ñì} {‚Ñì'' = ‚Ñì} ca
open import Realizability.Topos.Object {‚Ñì' = ‚Ñì} {‚Ñì'' = ‚Ñì} ca isNonTrivial 
open import Realizability.Topos.FunctionalRelation {‚Ñì' = ‚Ñì} {‚Ñì'' = ‚Ñì} ca isNonTrivial
open import Realizability.Topos.Equalizer {‚Ñì' = ‚Ñì} {‚Ñì'' = ‚Ñì} ca isNonTrivial
open import Realizability.Topos.BinProducts {‚Ñì' = ‚Ñì} {‚Ñì'' = ‚Ñì} ca isNonTrivial
open import Realizability.Topos.MonicReprFuncRel {‚Ñì' = ‚Ñì} {‚Ñì'' = ‚Ñì} ca isNonTrivial
open import Realizability.Topos.StrictRelation {‚Ñì' = ‚Ñì} {‚Ñì'' = ‚Ñì} ca isNonTrivial
open import Realizability.Topos.ResizedPredicate ca isNonTrivial resizing

open CombinatoryAlgebra ca
open Realizability.CombinatoryAlgebra.Combinators ca renaming (i to Id; ia‚â°a to Ida‚â°a)
open Predicate renaming (isSetX to isSetPredicateBase)
open Morphism
open PartialEquivalenceRelation
open FunctionalRelation
open Category RT
open StrictRelation

-- Power object of X

module _ (X : Type ‚Ñì) (perX : PartialEquivalenceRelation X) where
  open ResizedPredicateProps perX

  ùìü : PartialEquivalenceRelation (ResizedPredicate X)
  Predicate.isSetX (equality ùìü) = isSet√ó isSetResizedPredicate isSetResizedPredicate
  Predicate.‚à£ equality ùìü ‚à£ (œï , œà) r =
    (pr‚ÇÅ ‚®æ (pr‚ÇÅ ‚®æ r)) ‚ä© isStrictResizedPredicate œï √ó
    (pr‚ÇÇ ‚®æ (pr‚ÇÅ ‚®æ r)) ‚ä© isRelationalResizedPredicate œï √ó
    (pr‚ÇÅ ‚®æ (pr‚ÇÇ ‚®æ r)) ‚ä© entailmentResizedPredicate œï œà √ó
    (pr‚ÇÇ ‚®æ (pr‚ÇÇ ‚®æ r)) ‚ä© entailmentResizedPredicate œà œï
  Predicate.isPropValued (equality ùìü) (œï , œà) r =
    isProp√ó (isPropIsStrictResizedPredicate œï (pr‚ÇÅ ‚®æ (pr‚ÇÅ ‚®æ r)))
      (isProp√ó (isPropIsRelationalResizedPredicate œï (pr‚ÇÇ ‚®æ (pr‚ÇÅ ‚®æ r)))
        (isProp√ó
          (isPropEntailmentResizedPredicate œï œà (pr‚ÇÅ ‚®æ (pr‚ÇÇ ‚®æ r)))
          (isPropEntailmentResizedPredicate œà œï (pr‚ÇÇ ‚®æ (pr‚ÇÇ ‚®æ r)))))
  isPartialEquivalenceRelation.isSetX (isPerEquality ùìü) = isSetResizedPredicate
  isPartialEquivalenceRelation.isSymmetric (isPerEquality ùìü) =
    do
      let
        strictness : ApplStrTerm as 2
        strictness = ` pr‚ÇÅ Ãá (` pr‚ÇÅ Ãá # zero) Ãá (` pr‚ÇÇ Ãá (` pr‚ÇÇ Ãá # zero) Ãá # one)

        proj : ApplStrTerm as 3
        proj = # two

        proj' : ApplStrTerm as 2
        proj' = ` pr‚ÇÇ Ãá (` pr‚ÇÇ Ãá # zero) Ãá # one

        proj'' : ApplStrTerm as 2
        proj'' = ` pr‚ÇÅ Ãá (` pr‚ÇÇ Ãá # zero) Ãá # one

        realizer : ApplStrTerm as 1
        realizer = ` pair Ãá (` pair Ãá Œª*abst strictness Ãá Œª*abst (Œª*abst proj)) Ãá (` pair Ãá Œª*abst proj' Ãá Œª*abst proj'')
      return
        (Œª* realizer ,
        (Œª { œï œà r (‚ä©isStrictœï , isRelationalœï , ‚ä©œï‚â§œà , ‚ä©œà‚â§œï) ‚Üí
          (Œª x a ‚ä©œàx ‚Üí
            subst (Œª r' ‚Üí r' ‚ä© ‚à£ perX .equality ‚à£ (x , x)) (sym {!!}) (‚ä©isStrictœï x _ (‚ä©œà‚â§œï x a ‚ä©œàx))) ,
          (Œª x x' a b ‚ä©x~x' ‚ä©œàx ‚Üí
            subst (Œª r' ‚Üí r' ‚ä© ‚à£ toPredicate œà ‚à£ x') (sym {!!}) (‚ä©œï‚â§œà x' _ (isRelationalœï x x' _ _ ‚ä©x~x' (‚ä©œà‚â§œï x _ ‚ä©œàx)))) ,
          (Œª x a ‚ä©œàx ‚Üí subst (Œª r' ‚Üí r' ‚ä© ‚à£ toPredicate œï ‚à£ x) (sym {!!}) (‚ä©œà‚â§œï x a ‚ä©œàx)) ,
          (Œª x a ‚ä©œïx ‚Üí subst (Œª r' ‚Üí r' ‚ä© ‚à£ toPredicate œà ‚à£ x) (sym {!!}) (‚ä©œï‚â§œà x a ‚ä©œïx)) }))
  isPartialEquivalenceRelation.isTransitive (isPerEquality ùìü) =
    do
      return
        ({!!} ,
        (Œª {
          œï œà Œ∏ a b
          (‚ä©isStrictœï , ‚ä©isRelationalœï , ‚ä©œï‚â§œà , ‚ä©œà‚â§œï)
          (‚ä©isStrictœà , ‚ä©isRelationalœà , ‚ä©œà‚â§Œ∏ , ‚ä©Œ∏‚â§œà) ‚Üí
            subst (Œª r' ‚Üí r' ‚ä© isStrictResizedPredicate œï) {!!} ‚ä©isStrictœï ,
            subst (Œª r' ‚Üí r' ‚ä© isRelationalResizedPredicate œï) {!!} ‚ä©isRelationalœï ,
            (Œª x r ‚ä©œïx ‚Üí subst (Œª r' ‚Üí r' ‚ä© ‚à£ toPredicate Œ∏ ‚à£ x) {!!} (‚ä©œà‚â§Œ∏ x _ (‚ä©œï‚â§œà x r ‚ä©œïx))) ,
            (Œª x r ‚ä©Œ∏x ‚Üí subst (Œª r' ‚Üí r' ‚ä© ‚à£ toPredicate œï ‚à£ x) {!!} (‚ä©œà‚â§œï x _ (‚ä©Œ∏‚â§œà x r ‚ä©Œ∏x))) }))

  opaque
    unfolding binProdObRT
    ‚ààStrictRel : StrictRelation (binProdObRT perX ùìü)
    Predicate.isSetX (StrictRelation.predicate ‚ààStrictRel) = isSet√ó (perX .isSetX) isSetResizedPredicate
    Predicate.‚à£ StrictRelation.predicate ‚ààStrictRel ‚à£ (x , œï) r = (pr‚ÇÅ ‚®æ r) ‚ä© ‚à£ ùìü .equality ‚à£ (œï , œï) √ó (pr‚ÇÇ ‚®æ r) ‚ä© ‚à£ toPredicate œï ‚à£ x
    Predicate.isPropValued (StrictRelation.predicate ‚ààStrictRel) (x , œï) r =
      isProp√ó (ùìü .equality .isPropValued (œï , œï) (pr‚ÇÅ ‚®æ r)) (toPredicate œï .isPropValued _ _)
    isStrictRelation.isStrict (StrictRelation.isStrictRelationPredicate ‚ààStrictRel) =
      do
        return
          ({!!} ,
          Œª { (x , œï) r ((‚ä©isStrictœï , ‚ä©isRelationalœï , ‚ä©œï‚â§œï , ‚ä©'œï‚â§œï) , ‚ä©œïx) ‚Üí
            subst (Œª r' ‚Üí r' ‚ä© ‚à£ perX .equality ‚à£ (x , x)) {!!} (‚ä©isStrictœï x _ ‚ä©œïx) ,
            subst (Œª r' ‚Üí r' ‚ä© isStrictResizedPredicate œï) {!!} ‚ä©isStrictœï ,
            subst (Œª r' ‚Üí r' ‚ä© isRelationalResizedPredicate œï) {!!} ‚ä©isRelationalœï ,
            subst (Œª r' ‚Üí r' ‚ä© entailmentResizedPredicate œï œï) {!!} ‚ä©œï‚â§œï ,
            subst (Œª r' ‚Üí r' ‚ä© entailmentResizedPredicate œï œï) {!!} ‚ä©'œï‚â§œï })
    isStrictRelation.isRelational (StrictRelation.isStrictRelationPredicate ‚ààStrictRel) =
      do
        return
          ({!!} ,
          Œª { (x , œï) (x' , œà) a b ((‚ä©isStrictœï , ‚ä©isRelationalœï , ‚ä©œï‚â§œï , ‚ä©'œï‚â§œï) , ‚ä©œïx) (‚ä©x~x' , (‚ä©isStrict'œï , ‚ä©isRelational'œï , ‚ä©œï‚â§œà , ‚ä©œà‚â§œï)) ‚Üí
            ((Œª x'' r ‚ä©œàx'' ‚Üí
              subst (Œª r' ‚Üí r' ‚ä© ‚à£ perX .equality ‚à£ (x'' , x'')) {!!} (‚ä©isStrictœï x'' _ (‚ä©œà‚â§œï x'' r ‚ä©œàx''))) ,
             (Œª x'' x''' p q ‚ä©x''~x''' ‚ä©œàx'' ‚Üí
               subst (Œª r' ‚Üí r' ‚ä© ‚à£ toPredicate œà ‚à£ x''') (sym {!!}) (‚ä©œï‚â§œà x''' _ (‚ä©isRelationalœï x'' x''' _ _ ‚ä©x''~x''' (‚ä©œà‚â§œï x'' _ ‚ä©œàx'')))) ,
             (Œª x'' r ‚ä©œàx'' ‚Üí subst (Œª r' ‚Üí r' ‚ä© ‚à£ toPredicate œà ‚à£ x'') {!!} ‚ä©œàx'') ,
             Œª x'' r ‚ä©œàx'' ‚Üí subst (Œª r' ‚Üí r' ‚ä© ‚à£ toPredicate œà ‚à£ x'') {!!} ‚ä©œàx'') ,
             subst (Œª r' ‚Üí r' ‚ä© ‚à£ toPredicate œà ‚à£ x') {!!} (‚ä©œï‚â§œà x' _ (‚ä©isRelationalœï x x' _ _ ‚ä©x~x' ‚ä©œïx)) })

  open InducedSubobject (binProdObRT perX ùìü) ‚ààStrictRel
    renaming
      ( subPer to ‚ààsubPer
      ; incFuncRel to ‚ààincFuncRel
      ; isInjectiveIncFuncRel to isInjective‚ààIncFuncRel
      ; isMonicInc to isMonicInc‚àà)

  {-
  We need to show that the following is a pullback diagram and that [ F ] is the *unique* RT arrow that
  makes this diagram a pullback.

                [ top ] 
    (X √ó Y)œï - - - - - - - - - -> ‚àà‚Çì
       Œì _|                       Œì
       |                          |
       |                          |
       |                          |
       | [ incœï ]                 | [ inc‚àà ]
       |                          |
       |                          |
       |                          |
    (X √ó Y)  - - - - - - - - - -> (X √ó ùìü X)
                id‚Çì √ó [ F ]
  -}
  module PowerObjectUnivProp
    {Y : Type ‚Ñì}
    (perY : PartialEquivalenceRelation Y)
    (œï : StrictRelation (binProdObRT perX perY)) where

    open InducedSubobject (binProdObRT perX perY) œï
      renaming
        ( subPer to œïsubPer
        ; incFuncRel to œïincFuncRel
        ; isInjectiveIncFuncRel to isInjectiveœïIncFuncRel
        ; isMonicInc to isMonicIncœï)

    opaque
      unfolding binProdObRT
      unfolding idFuncRel
      {-# TERMINATING #-}
      topArrowFuncRel : FunctionalRelation œïsubPer ‚ààsubPer
      Predicate.isSetX (relation topArrowFuncRel) = isSet√ó (isSet√ó (perX .isSetX) (perY .isSetX)) (isSet√ó (perX .isSetX) isSetResizedPredicate)
      Predicate.‚à£ relation topArrowFuncRel ‚à£ ((x , y) , (x' , p)) r =
        (pr‚ÇÅ ‚®æ r) ‚ä© ‚à£ perX .equality ‚à£ (x , x') √ó
        (pr‚ÇÅ ‚®æ (pr‚ÇÇ ‚®æ r)) ‚ä© ‚à£ toPredicate p ‚à£ x √ó
        (pr‚ÇÇ ‚®æ (pr‚ÇÇ ‚®æ r)) ‚ä© ‚à£ œï .predicate ‚à£ (x , y)
      Predicate.isPropValued (relation topArrowFuncRel) ((x , y) , (x' , p)) r =
        isProp√ó
          (perX .equality .isPropValued _ _)
          (isProp√ó
            (toPredicate p .isPropValued _ _)
            (œï .predicate .isPropValued _ _))
      isFunctionalRelation.isStrictDomain (isFuncRel topArrowFuncRel) =
        do
          (stX , stX‚ä©isStrictDomainEqX) ‚Üê idFuncRel perX .isStrictDomain
          (stY , stY‚ä©isStrictDomainEqY) ‚Üê idFuncRel perY .isStrictDomain
          return
            ({!!} ,
            (Œª { (x , y) (x' , p) r (‚ä©x~x' , ‚ä©œïxy , ‚ä©px) ‚Üí
              (subst (Œª r' ‚Üí r' ‚ä© ‚à£ perX .equality ‚à£ (x , x)) {!!} (stX‚ä©isStrictDomainEqX x x' _ ‚ä©x~x') ,
               {!subst !}) ,
               {!!}}))
      isFunctionalRelation.isStrictCodomain (isFuncRel topArrowFuncRel) = {!!}
      isFunctionalRelation.isRelational (isFuncRel topArrowFuncRel) = {!!}
      isFunctionalRelation.isSingleValued (isFuncRel topArrowFuncRel) = {!!}
      isFunctionalRelation.isTotal (isFuncRel topArrowFuncRel) = {!!}

    powerObjectCospan : RTMorphism (binProdObRT perX perY) (binProdObRT perX ùìü) ‚Üí Cospan RT
    Cospan.l (powerObjectCospan f) = X √ó Y , binProdObRT perX perY
    Cospan.m (powerObjectCospan f) = X √ó ResizedPredicate X , binProdObRT perX ùìü
    Cospan.r (powerObjectCospan f) = X √ó ResizedPredicate X , ‚ààsubPer
    Cospan.s‚ÇÅ (powerObjectCospan f) = f
    Cospan.s‚ÇÇ (powerObjectCospan f) = [ ‚ààincFuncRel ]

    F : FunctionalRelation (binProdObRT perX perY) (binProdObRT perX ùìü)
    Predicate.isSetX (relation F) = isSet√ó (isSet√ó (perX .isSetX) (perY .isSetX)) (isSet√ó (perX .isSetX) isSetResizedPredicate)
    Predicate.‚à£ relation F ‚à£ ((x , y) , (x' , p)) r = (pr‚ÇÅ ‚®æ (pr‚ÇÅ ‚®æ r)) ‚ä© ‚à£ perY .equality ‚à£ (y , y) √ó (pr‚ÇÇ ‚®æ (pr‚ÇÅ ‚®æ r)) ‚ä© ‚à£ ùìü .equality ‚à£ (p , p) √ó {!‚àÄ !} √ó {!!}
    Predicate.isPropValued (relation F) = {!!}
    isFunctionalRelation.isStrictDomain (isFuncRel F) = {!!}
    isFunctionalRelation.isStrictCodomain (isFuncRel F) = {!!}
    isFunctionalRelation.isRelational (isFuncRel F) = {!!}
    isFunctionalRelation.isSingleValued (isFuncRel F) = {!!}
    isFunctionalRelation.isTotal (isFuncRel F) = {!!}

    opaque
      unfolding composeRTMorphism
      unfolding composeFuncRel
      pullbackSquareCommutes : [ œïincFuncRel ] ‚ãÜ [ F ] ‚â° [ topArrowFuncRel ] ‚ãÜ [ ‚ààincFuncRel ]
      pullbackSquareCommutes =
        eq/ _ _ {!!}

    isPowerObjectUnivProp : Type _
    isPowerObjectUnivProp =
      ‚àÉ![ f ‚àà RTMorphism (binProdObRT perX perY) (binProdObRT perX ùìü) ]
        Œ£[ commutes ‚àà [ œïincFuncRel ] ‚ãÜ f ‚â° [ topArrowFuncRel ] ‚ãÜ [ ‚ààincFuncRel ] ] 
         (isPullback RT (powerObjectCospan f) {c = X √ó Y , œïsubPer} [ œïincFuncRel ] [ topArrowFuncRel ] commutes)

    isPropIsPowerObjectUnivProp : isProp isPowerObjectUnivProp
    isPropIsPowerObjectUnivProp = isPropIsContr

    isPowerObject : isPowerObjectUnivProp
    isPowerObject =
      uniqueExists
        [ F ]
        (pullbackSquareCommutes , {!!})
        (Œª F' ‚Üí isPropŒ£ (squash/ _ _) Œª commutes ‚Üí isPropIsPullback RT (powerObjectCospan F') [ œïincFuncRel ] [ topArrowFuncRel ] commutes)
        (Œª { f' (commutes , isPullback) ‚Üí
           {!!} })
