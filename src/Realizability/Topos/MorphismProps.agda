open import Realizability.ApplicativeStructure renaming (Term to ApplStrTerm; Œª*-naturality to `Œª*ComputationRule; Œª*-chain to `Œª*) hiding (Œª*)
open import Realizability.CombinatoryAlgebra
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure
open import Cubical.Foundations.HLevels
open import Cubical.Functions.FunExtEquiv
open import Cubical.Data.Vec
open import Cubical.Data.Nat
open import Cubical.Data.FinData
open import Cubical.Data.Fin hiding (Fin; _/_)
open import Cubical.Data.Sigma
open import Cubical.Data.Empty
open import Cubical.Data.Unit
open import Cubical.HITs.PropositionalTruncation
open import Cubical.HITs.PropositionalTruncation.Monad
open import Cubical.HITs.SetQuotients as SQ
open import Cubical.Categories.Category
open import Cubical.Categories.Morphism
open import Cubical.Relation.Binary
-- Functional relations that represent monics
module Realizability.Topos.MonicReprFuncRel
  {‚Ñì ‚Ñì' ‚Ñì''}
  {A : Type ‚Ñì}
  (ca : CombinatoryAlgebra A)
  (isNonTrivial : CombinatoryAlgebra.s ca ‚â° CombinatoryAlgebra.k ca ‚Üí ‚ä•)
  where

open import Realizability.Tripos.Prealgebra.Predicate {‚Ñì' = ‚Ñì'} {‚Ñì'' = ‚Ñì''} ca
open import Realizability.Tripos.Prealgebra.Meets.Identity {‚Ñì' = ‚Ñì'} {‚Ñì'' = ‚Ñì''} ca
open import Realizability.Topos.Object {‚Ñì = ‚Ñì} {‚Ñì' = ‚Ñì'} {‚Ñì'' = ‚Ñì''} ca isNonTrivial 
open import Realizability.Topos.FunctionalRelation {‚Ñì' = ‚Ñì'} {‚Ñì'' = ‚Ñì''} ca isNonTrivial
open import Realizability.Topos.Equalizer {‚Ñì' = ‚Ñì'} {‚Ñì'' = ‚Ñì''} ca isNonTrivial
open import Realizability.Topos.BinProducts {‚Ñì' = ‚Ñì'} {‚Ñì'' = ‚Ñì''} ca isNonTrivial
open CombinatoryAlgebra ca
open Realizability.CombinatoryAlgebra.Combinators ca renaming (i to Id; ia‚â°a to Ida‚â°a)
open Predicate renaming (isSetX to isSetPredicateBase)
open PredicateProperties
open Morphism
open PartialEquivalenceRelation
open FunctionalRelation
open Category RT

private Œª*ComputationRule = `Œª*ComputationRule as fefermanStructure
private Œª* = `Œª* as fefermanStructure

-- Monics in RT
module _ {X Y : Type ‚Ñì'} (perX : PartialEquivalenceRelation X) (perY : PartialEquivalenceRelation Y) (F : FunctionalRelation perX perY) where

  opaque
    isInjectiveFuncRel : Type (‚Ñì-max ‚Ñì (‚Ñì-max ‚Ñì' ‚Ñì''))
    isInjectiveFuncRel =
      ‚àÉ[ inj ‚àà A ] (‚àÄ x x' y r‚ÇÅ r‚ÇÇ ‚Üí r‚ÇÅ ‚ä© ‚à£ F .relation ‚à£ (x , y) ‚Üí r‚ÇÇ ‚ä© ‚à£ F .relation ‚à£ (x' , y) ‚Üí (inj ‚®æ r‚ÇÅ ‚®æ r‚ÇÇ) ‚ä© ‚à£ perX .equality ‚à£ (x , x'))

  opaque
    unfolding isInjectiveFuncRel
    isPropIsInjectiveFuncRel : isProp isInjectiveFuncRel
    isPropIsInjectiveFuncRel = isPropPropTrunc

  -- This is the easier part
  -- Essentially just a giant realizer that uses the injectivity
  opaque
    unfolding composeRTMorphism
    unfolding composeFuncRel
    unfolding isInjectiveFuncRel
    isInjectiveFuncRel‚ÜíisMonic : isInjectiveFuncRel ‚Üí isMonic RT [ F ]
    isInjectiveFuncRel‚ÜíisMonic isInjectiveF {Z , perZ} {a} {b} a‚ãÜ[F]‚â°b‚ãÜ[F] =
      SQ.elimProp2
        {P = Œª a b ‚Üí composeRTMorphism _ _ _ a [ F ] ‚â° composeRTMorphism _ _ _ b [ F ] ‚Üí a ‚â° b}
        (Œª a b ‚Üí isPropŒ† Œª _ ‚Üí squash/ a b)
        (Œª A B A‚ãÜF‚â°B‚ãÜF ‚Üí
          let
            (p , q) = SQ.effective (isPropValuedBientailment perZ perY) (isEquivRelBientailment perZ perY) _ _ A‚ãÜF‚â°B‚ãÜF
            answer =
              do
                (p , p‚ä©A‚ãÜF‚â§B‚ãÜF) ‚Üê p
                (stCA , stCA‚ä©isStrictCodomainA) ‚Üê A .isStrictCodomain
                (stDA , stDA‚ä©isStrictDomainA) ‚Üê A .isStrictDomain
                (tlF , tlF‚ä©isTotalF) ‚Üê F .isTotal
                (relB , relB‚ä©isRelationalB) ‚Üê B .isRelational
                (injF , injF‚ä©isInjectiveF) ‚Üê isInjectiveF
                let
                  realizer : ApplStrTerm as 1
                  realizer =
                    ` relB Ãá (` stDA Ãá # fzero) Ãá (` pr‚ÇÅ Ãá (` p Ãá (` pair Ãá # fzero Ãá (` tlF Ãá (` stCA Ãá # fzero))))) Ãá
                      (` injF Ãá (` pr‚ÇÇ Ãá (` p Ãá (` pair Ãá # fzero Ãá (` tlF Ãá (` stCA Ãá # fzero))))) Ãá
                      (` tlF Ãá (` stCA Ãá # fzero)))
                return
                  (Œª* realizer ,
                  (Œª z x r r‚ä©Azx ‚Üí
                    transport
                      (propTruncIdempotent (B .relation .isPropValued _ _))
                      (do
                        let
                          x~x = stCA‚ä©isStrictCodomainA z x r r‚ä©Azx
                          z~z = stDA‚ä©isStrictDomainA z x r r‚ä©Azx
                        (y , ‚ä©Fxy) ‚Üê tlF‚ä©isTotalF x _ x~x
                        (x' , ‚ä©Bzx' , ‚ä©Fx'y)  ‚Üê
                          p‚ä©A‚ãÜF‚â§B‚ãÜF
                            z y
                            (pair ‚®æ r ‚®æ (tlF ‚®æ (stCA ‚®æ r)))
                            (return
                              (x ,
                              subst (Œª r' ‚Üí r' ‚ä© ‚à£ A .relation ‚à£ (z , x)) (sym (pr‚ÇÅpxy‚â°x _ _)) r‚ä©Azx ,
                              subst (Œª r' ‚Üí r' ‚ä© ‚à£ F .relation ‚à£ (x , y)) (sym (pr‚ÇÇpxy‚â°y _ _)) ‚ä©Fxy))
                        let
                          x'~x = injF‚ä©isInjectiveF x' x y _ _ ‚ä©Fx'y ‚ä©Fxy -- this is the only place where we actually need the injectivity
                        return
                          (subst
                            (Œª r' ‚Üí r' ‚ä© ‚à£ B .relation ‚à£ (z , x))
                            (sym (Œª*ComputationRule realizer (r ‚à∑ [])))
                            (relB‚ä©isRelationalB z z x' x _ _ _ z~z ‚ä©Bzx' x'~x)))))
          in
          eq/ A B (answer , F‚â§G‚ÜíG‚â§F perZ perX A B answer))
        a b
        a‚ãÜ[F]‚â°b‚ãÜ[F]

  opaque
    unfolding binProdPr‚ÇÅRT
    unfolding binProdPr‚ÇÅFuncRel
    unfolding binProdPr‚ÇÇFuncRel
    unfolding equalizerMorphism
    unfolding composeRTMorphism

    œÄ‚ÇÅ : FunctionalRelation (binProdObRT perX perX) perX
    œÄ‚ÇÅ = binProdPr‚ÇÅFuncRel perX perX

    œÄ‚ÇÇ : FunctionalRelation (binProdObRT perX perX) perX
    œÄ‚ÇÇ = binProdPr‚ÇÇFuncRel perX perX

    kernelPairEqualizerFuncRel :
      FunctionalRelation
        (equalizerPer -- hehe
          (binProdObRT perX perX) perY
          ([ œÄ‚ÇÅ ] ‚ãÜ [ F ])
          ([ œÄ‚ÇÇ ] ‚ãÜ [ F ])
          (composeFuncRel _ _ _ œÄ‚ÇÅ F)
          (composeFuncRel _ _ _ œÄ‚ÇÇ F))
        (binProdObRT perX perX)
    kernelPairEqualizerFuncRel =
      equalizerFuncRel _ _
        ((binProdPr‚ÇÅRT perX perX) ‚ãÜ [ F ])
        ((binProdPr‚ÇÇRT perX perX) ‚ãÜ [ F ])
        (composeFuncRel _ _ _ (binProdPr‚ÇÅFuncRel perX perX) F)
        (composeFuncRel _ _ _ (binProdPr‚ÇÇFuncRel perX perX) F)

    kernelPairEqualizer‚ãÜœÄ‚ÇÅ‚â°kernelPairEqualizer‚ãÜœÄ‚ÇÇ :
      composeRTMorphism _ _ _ [ kernelPairEqualizerFuncRel ] (composeRTMorphism _ _ _ [ œÄ‚ÇÅ ] [ F ]) ‚â° composeRTMorphism _ _ _ [ kernelPairEqualizerFuncRel ] (composeRTMorphism _ _ _ [ œÄ‚ÇÇ ] [ F ])
    kernelPairEqualizer‚ãÜœÄ‚ÇÅ‚â°kernelPairEqualizer‚ãÜœÄ‚ÇÇ =
      inc‚ãÜf‚â°inc‚ãÜg
        (binProdObRT perX perX) perY
        (composeRTMorphism _ _ _ [ œÄ‚ÇÅ ] [ F ])
        (composeRTMorphism _ _ _ [ œÄ‚ÇÇ ] [ F ])
        (composeFuncRel _ _ _ œÄ‚ÇÅ F)
        (composeFuncRel _ _ _ œÄ‚ÇÇ F)

    mainKernelPairEquation : ([ kernelPairEqualizerFuncRel ] ‚ãÜ [ œÄ‚ÇÅ ]) ‚ãÜ [ F ] ‚â° ([ kernelPairEqualizerFuncRel ] ‚ãÜ [ œÄ‚ÇÇ ]) ‚ãÜ [ F ]
    mainKernelPairEquation =
      ([ kernelPairEqualizerFuncRel ] ‚ãÜ [ œÄ‚ÇÅ ]) ‚ãÜ [ F ]
        ‚â°‚ü® ‚ãÜAssoc [ kernelPairEqualizerFuncRel ] [ œÄ‚ÇÅ ] [ F ]  ‚ü© -- Agda cannot solve these as constraints üòî
      [ kernelPairEqualizerFuncRel ] ‚ãÜ ([ œÄ‚ÇÅ ] ‚ãÜ [ F ])
        ‚â°‚ü® kernelPairEqualizer‚ãÜœÄ‚ÇÅ‚â°kernelPairEqualizer‚ãÜœÄ‚ÇÇ ‚ü©
      [ kernelPairEqualizerFuncRel ] ‚ãÜ ([ œÄ‚ÇÇ ] ‚ãÜ [ F ])
        ‚â°‚ü® sym (‚ãÜAssoc [ kernelPairEqualizerFuncRel ] [ œÄ‚ÇÇ ] [ F ]) ‚ü©
      ([ kernelPairEqualizerFuncRel ] ‚ãÜ [ œÄ‚ÇÇ ]) ‚ãÜ [ F ]
        ‚àé

  opaque
    unfolding isInjectiveFuncRel
    unfolding composeRTMorphism
    unfolding kernelPairEqualizerFuncRel
    unfolding equalizerFuncRel
    unfolding equalizerPer
    unfolding binProdPr‚ÇÅRT
    unfolding binProdPr‚ÇÇFuncRel
    isMonic‚ÜíisInjectiveFuncRel : isMonic RT [ F ] ‚Üí isInjectiveFuncRel
    isMonic‚ÜíisInjectiveFuncRel isMonicF =
      do
        let
          equation = isMonicF {a = [ kernelPairEqualizerFuncRel ] ‚ãÜ [ œÄ‚ÇÅ ]} {a' = [ kernelPairEqualizerFuncRel ] ‚ãÜ [ œÄ‚ÇÇ ]} mainKernelPairEquation
          (p , q) = SQ.effective (isPropValuedBientailment _ _) (isEquivRelBientailment _ _) _ _ equation
        (p , p‚ä©kœÄ‚ÇÅ‚â§kœÄ‚ÇÇ) ‚Üê p
        (q , q‚ä©kœÄ‚ÇÇ‚â§kœÄ‚ÇÅ) ‚Üê q
        (stCF , stCF‚ä©isStrictCodomainF) ‚Üê F .isStrictCodomain
        (stDF , stDF‚ä©isStrictDomainF) ‚Üê F .isStrictDomain
        (s , s‚ä©isSymmetricEqX) ‚Üê perX .isSymmetric
        (t , t‚ä©isTransitiveEqX) ‚Üê perX .isTransitive
        let
          cursed : ApplStrTerm as 2
          cursed =
             (` pair Ãá
                  (` pair Ãá
                    (` pair Ãá (` stDF Ãá # fzero) Ãá (` stDF Ãá # fone)) Ãá
                    (` pair Ãá (` pair Ãá (` pair Ãá (` stDF Ãá # fzero) Ãá (` stDF Ãá # fone)) Ãá # fzero) Ãá (` pair Ãá (` pair Ãá (` stDF Ãá # fone) Ãá (` stDF Ãá # fzero)) Ãá # fone))) Ãá
                  (` pair Ãá (` stDF Ãá # fzero) Ãá (` stDF Ãá # fone)))
          realizer : ApplStrTerm as 2
          realizer = ` t Ãá (` s Ãá (` pr‚ÇÅ Ãá (` pr‚ÇÇ Ãá (` p Ãá cursed)))) Ãá (` s Ãá (` pr‚ÇÇ Ãá (` pr‚ÇÅ Ãá (` pr‚ÇÅ Ãá (` p Ãá cursed)))))
        return
          (Œª* realizer ,
          (Œª x‚ÇÅ x‚ÇÇ y r‚ÇÅ r‚ÇÇ r‚ÇÅ‚ä©Fx‚ÇÅy r‚ÇÇ‚ä©Fx‚ÇÇy ‚Üí
            let
              x‚ÇÅ~x‚ÇÅ = stDF‚ä©isStrictDomainF x‚ÇÅ y r‚ÇÅ r‚ÇÅ‚ä©Fx‚ÇÅy
              x‚ÇÇ~x‚ÇÇ = stDF‚ä©isStrictDomainF x‚ÇÇ y r‚ÇÇ r‚ÇÇ‚ä©Fx‚ÇÇy
              foo =
                p‚ä©kœÄ‚ÇÅ‚â§kœÄ‚ÇÇ (x‚ÇÅ , x‚ÇÇ) x‚ÇÅ
                (pair ‚®æ
                  (pair ‚®æ
                    (pair ‚®æ (stDF ‚®æ r‚ÇÅ) ‚®æ (stDF ‚®æ r‚ÇÇ)) ‚®æ
                    (pair ‚®æ (pair ‚®æ (pair ‚®æ (stDF ‚®æ r‚ÇÅ) ‚®æ (stDF ‚®æ r‚ÇÇ)) ‚®æ r‚ÇÅ) ‚®æ (pair ‚®æ (pair ‚®æ (stDF ‚®æ r‚ÇÇ) ‚®æ (stDF ‚®æ r‚ÇÅ)) ‚®æ r‚ÇÇ))) ‚®æ
                  (pair ‚®æ (stDF ‚®æ r‚ÇÅ) ‚®æ (stDF ‚®æ r‚ÇÇ)))
                (return
                  (((x‚ÇÅ , x‚ÇÇ)) ,
                  ((subst (Œª r' ‚Üí r' ‚ä© ‚à£ perX .equality ‚à£ (x‚ÇÅ , x‚ÇÅ)) (sym (cong (Œª x ‚Üí pr‚ÇÅ ‚®æ (pr‚ÇÅ ‚®æ x)) (pr‚ÇÅpxy‚â°x _ _) ‚àô cong (Œª x ‚Üí pr‚ÇÅ ‚®æ x) (pr‚ÇÅpxy‚â°x _ _) ‚àô pr‚ÇÅpxy‚â°x _ _)) x‚ÇÅ~x‚ÇÅ ,
                    subst (Œª r' ‚Üí r' ‚ä© ‚à£ perX .equality ‚à£ (x‚ÇÇ , x‚ÇÇ)) (sym (cong (Œª x ‚Üí pr‚ÇÇ ‚®æ (pr‚ÇÅ ‚®æ x)) (pr‚ÇÅpxy‚â°x _ _) ‚àô cong (Œª x ‚Üí pr‚ÇÇ ‚®æ x) (pr‚ÇÅpxy‚â°x _ _) ‚àô pr‚ÇÇpxy‚â°y _ _)) x‚ÇÇ~x‚ÇÇ) ,
                 return
                  (y ,
                    return
                      (x‚ÇÅ ,
                        (subst (Œª r' ‚Üí r' ‚ä© ‚à£ perX .equality ‚à£ (x‚ÇÅ , x‚ÇÅ))
                          (sym
                            (cong (Œª x ‚Üí pr‚ÇÅ ‚®æ (pr‚ÇÅ ‚®æ (pr‚ÇÅ ‚®æ (pr‚ÇÇ ‚®æ x)))) (pr‚ÇÅpxy‚â°x _ _) ‚àô
                             cong (Œª x ‚Üí pr‚ÇÅ ‚®æ (pr‚ÇÅ ‚®æ (pr‚ÇÅ ‚®æ x))) (pr‚ÇÇpxy‚â°y _ _) ‚àô
                             cong (Œª x ‚Üí pr‚ÇÅ ‚®æ (pr‚ÇÅ ‚®æ x)) (pr‚ÇÅpxy‚â°x _ _) ‚àô
                             cong (Œª x ‚Üí pr‚ÇÅ ‚®æ x) (pr‚ÇÅpxy‚â°x _ _) ‚àô
                             pr‚ÇÅpxy‚â°x _ _))
                          x‚ÇÅ~x‚ÇÅ ,
                         subst (Œª r' ‚Üí r' ‚ä© ‚à£ perX .equality ‚à£ (x‚ÇÇ , x‚ÇÇ))
                           (sym
                             (cong (Œª x ‚Üí pr‚ÇÇ ‚®æ (pr‚ÇÅ ‚®æ (pr‚ÇÅ ‚®æ (pr‚ÇÇ ‚®æ x)))) (pr‚ÇÅpxy‚â°x _ _) ‚àô
                              cong (Œª x ‚Üí pr‚ÇÇ ‚®æ (pr‚ÇÅ ‚®æ (pr‚ÇÅ ‚®æ x))) (pr‚ÇÇpxy‚â°y _ _) ‚àô
                              cong (Œª x ‚Üí pr‚ÇÇ ‚®æ (pr‚ÇÅ ‚®æ x)) (pr‚ÇÅpxy‚â°x _ _) ‚àô
                              cong (Œª x ‚Üí pr‚ÇÇ ‚®æ x) (pr‚ÇÅpxy‚â°x _ _) ‚àô
                              pr‚ÇÇpxy‚â°y _ _))
                           x‚ÇÇ~x‚ÇÇ) ,
                         subst (Œª r' ‚Üí r' ‚ä© ‚à£ F .relation ‚à£ (x‚ÇÅ , y))
                           (sym
                             (cong (Œª x ‚Üí pr‚ÇÇ ‚®æ (pr‚ÇÅ ‚®æ (pr‚ÇÇ ‚®æ x))) (pr‚ÇÅpxy‚â°x _ _) ‚àô
                              cong (Œª x ‚Üí pr‚ÇÇ ‚®æ (pr‚ÇÅ ‚®æ x)) (pr‚ÇÇpxy‚â°y _ _) ‚àô
                              cong (Œª x ‚Üí pr‚ÇÇ ‚®æ x) (pr‚ÇÅpxy‚â°x _ _) ‚àô
                              pr‚ÇÇpxy‚â°y _ _))
                           r‚ÇÅ‚ä©Fx‚ÇÅy) ,
                    return
                      (x‚ÇÇ ,
                        (subst (Œª r' ‚Üí r' ‚ä© ‚à£ perX .equality ‚à£ (x‚ÇÇ , x‚ÇÇ))
                          (sym
                            (cong (Œª x ‚Üí pr‚ÇÅ ‚®æ (pr‚ÇÅ ‚®æ (pr‚ÇÇ ‚®æ (pr‚ÇÇ ‚®æ x)))) (pr‚ÇÅpxy‚â°x _ _) ‚àô
                             cong (Œª x ‚Üí pr‚ÇÅ ‚®æ (pr‚ÇÅ ‚®æ (pr‚ÇÇ ‚®æ x))) (pr‚ÇÇpxy‚â°y _ _) ‚àô
                             cong (Œª x ‚Üí pr‚ÇÅ ‚®æ (pr‚ÇÅ ‚®æ x)) (pr‚ÇÇpxy‚â°y _ _) ‚àô
                             cong (Œª x ‚Üí pr‚ÇÅ ‚®æ x) (pr‚ÇÅpxy‚â°x _ _) ‚àô
                             pr‚ÇÅpxy‚â°x _ _))
                          x‚ÇÇ~x‚ÇÇ ,
                         subst (Œª r' ‚Üí r' ‚ä© ‚à£ perX .equality ‚à£ (x‚ÇÅ , x‚ÇÅ))
                           (sym
                             (cong (Œª x ‚Üí pr‚ÇÇ ‚®æ (pr‚ÇÅ ‚®æ (pr‚ÇÇ ‚®æ (pr‚ÇÇ ‚®æ x)))) (pr‚ÇÅpxy‚â°x _ _) ‚àô
                              cong (Œª x ‚Üí pr‚ÇÇ ‚®æ (pr‚ÇÅ ‚®æ (pr‚ÇÇ ‚®æ x))) (pr‚ÇÇpxy‚â°y _ _) ‚àô
                              cong (Œª x ‚Üí pr‚ÇÇ ‚®æ (pr‚ÇÅ ‚®æ x)) (pr‚ÇÇpxy‚â°y _ _) ‚àô
                              cong (Œª x ‚Üí pr‚ÇÇ ‚®æ x) (pr‚ÇÅpxy‚â°x _ _) ‚àô
                              pr‚ÇÇpxy‚â°y _ _))
                           x‚ÇÅ~x‚ÇÅ) ,
                         subst (Œª r' ‚Üí r' ‚ä© ‚à£ F .relation ‚à£ (x‚ÇÇ , y))
                           (sym
                             (cong (Œª x ‚Üí pr‚ÇÇ ‚®æ (pr‚ÇÇ ‚®æ (pr‚ÇÇ ‚®æ x))) (pr‚ÇÅpxy‚â°x _ _) ‚àô
                              cong (Œª x ‚Üí pr‚ÇÇ ‚®æ (pr‚ÇÇ ‚®æ x)) (pr‚ÇÇpxy‚â°y _ _) ‚àô
                              cong (Œª x ‚Üí pr‚ÇÇ ‚®æ x) (pr‚ÇÇpxy‚â°y _ _) ‚àô
                              pr‚ÇÇpxy‚â°y _ _)) r‚ÇÇ‚ä©Fx‚ÇÇy))) ,
                         subst (Œª r' ‚Üí r' ‚ä© ‚à£ perX .equality ‚à£ (x‚ÇÅ , x‚ÇÅ)) (sym (cong (Œª x ‚Üí pr‚ÇÅ ‚®æ x) (pr‚ÇÇpxy‚â°y _ _) ‚àô pr‚ÇÅpxy‚â°x _ _)) x‚ÇÅ~x‚ÇÅ ,
                         subst (Œª r' ‚Üí r' ‚ä© ‚à£ perX .equality ‚à£ (x‚ÇÇ , x‚ÇÇ)) (sym (cong (Œª x ‚Üí pr‚ÇÇ ‚®æ x) (pr‚ÇÇpxy‚â°y _ _) ‚àô pr‚ÇÇpxy‚â°y _ _)) x‚ÇÇ~x‚ÇÇ))
            in
            transport
              (propTruncIdempotent (perX .equality .isPropValued _ _))
              (do
                ((x‚ÇÅ' , x‚ÇÇ') , ((x‚ÇÅ~x‚ÇÅ' , x‚ÇÇ~x‚ÇÇ') , kp2) , p2) ‚Üê foo
                (y' , bar1 , bar2) ‚Üê kp2
                (x‚ÇÅ'' , (x‚ÇÅ~x‚ÇÅ'' , x‚ÇÇ~'x‚ÇÇ) , ‚ä©Fx‚ÇÅ''y') ‚Üê bar1
                (x‚ÇÇ'' , (x‚ÇÇ~x‚ÇÇ'' , x‚ÇÅ~'x‚ÇÅ) , ‚ä©Fx‚ÇÇ''y') ‚Üê bar2
                let
                  (x‚ÇÇ'~x‚ÇÅ , foo') = p2
                return
                  (subst
                    (Œª r' ‚Üí r' ‚ä© ‚à£ perX .equality ‚à£ (x‚ÇÅ , x‚ÇÇ))
                    (sym (Œª*ComputationRule realizer (r‚ÇÅ ‚à∑ r‚ÇÇ ‚à∑ [])))
                    (t‚ä©isTransitiveEqX x‚ÇÅ x‚ÇÇ' x‚ÇÇ _ _ (s‚ä©isSymmetricEqX x‚ÇÇ' x‚ÇÅ _ x‚ÇÇ'~x‚ÇÅ) (s‚ä©isSymmetricEqX x‚ÇÇ x‚ÇÇ' _ x‚ÇÇ~x‚ÇÇ'))))))
